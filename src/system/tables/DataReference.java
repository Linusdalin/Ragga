package system.tables;

import dataRepresentation.*;
import databaseLayer.DBKeyInterface;
import pukkaBO.exceptions.BackOfficeException;
import pukkaBO.condition.*;

/********************************************************
 *
 *    DataReference - Data Object
 *    Automatically generated file by GenerateTable.java
 *
 *
 */

public class DataReference extends DataObject implements DataObjectInterface{



    private static final DataTableInterface TABLE = (DataTableInterface) new DataReferenceTable();

    public DataReference(){

        super();         if(table == null)
            table = TABLE;
    }

    public DataReference(String location, DataObjectInterface name, String time, String birth, long occurrences) throws BackOfficeException{

        this(location, name.getKey(), time, birth, occurrences);
    }


    public DataReference(String location, DBKeyInterface name, String time, String birth, long occurrences) throws BackOfficeException{

        this();
        ColumnStructureInterface[] columns = getColumnFromTable();


        data = new ColumnDataInterface[columns.length + 1];

        data[0] = new StringData(location);
        data[1] = new ReferenceData(name, columns[1].getTableReference());
        data[2] = new TimeStampData(time);
        data[3] = new DateData(birth);
        data[4] = new IntData(occurrences);

        data[5] = new IntData( 0 ); // Set id
        exists = true;


    }
    /*********************************************************************''
     *
     *          Load from database
     *
     * @param condition - the SQL condition for selecting ONE UNIQUE object
     */

    public DataReference(ConditionInterface condition){

        this();

        try{
            exists = load(condition);

        }catch(BackOfficeException e){

            System.out.println("Error loading object from database" + e.narration);
            e.printStackTrace();
        }

    }

    public DataObjectInterface createNew(ColumnDataInterface[] data ) throws BackOfficeException {

        return new DataReference(data[0].getStringValue(), data[1].getRefValue(), data[2].getStringValue(), data[3].getStringValue(), data[4].getIntValue());
    }

    public String getLocation(){

        StringData data = (StringData) this.data[0];
        return data.getStringValue();
    }

    public void setLocation(String location){

        StringData data = (StringData) this.data[0];
        data.setStringValue(location);
    }



    public DBKeyInterface getnameId(){

        ReferenceData data = (ReferenceData)this.data[1];
        return data.value;
    }

    public Example1 getname(){

        ReferenceData data = (ReferenceData)this.data[1];
        return new Example1(new LookupByKey(data.value));
    }

    public void setname(DBKeyInterface name){

        ReferenceData data = (ReferenceData)this.data[1];
        data.value = name;
    }



    public DBTimeStamp getTime()throws BackOfficeException{

        TimeStampData data = (TimeStampData) this.data[2];
        return new DBTimeStamp(DBTimeStamp.SQL_TIMESTAMP, data.value);
    }

    public void setTime(DBTimeStamp time){

        TimeStampData data = (TimeStampData) this.data[2];
        data.value = time.getSQLTime().toString();
    }



    public DBTimeStamp getBirth()throws BackOfficeException{

        DateData data = (DateData) this.data[3];
        return new DBTimeStamp(DBTimeStamp.ISO_DATE, data.value);
    }

    public void setBirth(DBTimeStamp birth){

        DateData data = (DateData) this.data[3];
        data.value = birth.getISODate().toString();
    }



    public long getOccurrences(){

        IntData data = (IntData) this.data[4];
        return data.value;
    }

    public void setOccurrences(long occurrences){

        IntData data = (IntData) this.data[4];
        data.value = occurrences;
    }




    /* Code below this point will not be replaced when regenerating the file*/

    /*__endAutoGenerated*/



}
